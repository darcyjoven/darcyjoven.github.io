<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Golang - 标签 - DARCY&#39;S BLOG</title>
        <link>https://darcyjoven.com/tags/golang/</link>
        <description>Golang - 标签 - DARCY&#39;S BLOG</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>darcyjoven@live.com (darcy)</managingEditor>
            <webMaster>darcyjoven@live.com (darcy)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 16 Nov 2023 15:30:21 &#43;0800</lastBuildDate><atom:link href="https://darcyjoven.com/tags/golang/" rel="self" type="application/rss+xml" /><item>
    <title>BDL调用golang(cgo)</title>
    <link>https://darcyjoven.com/bdl%D1%9Egolangcgo/</link>
    <pubDate>Thu, 16 Nov 2023 15:30:21 &#43;0800</pubDate>
    <author>darcy</author>
    <guid>https://darcyjoven.com/bdl%D1%9Egolangcgo/</guid>
    <description><![CDATA[golang 编译 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import &#34;C&#34; import &#34;fmt&#34; //export hello func hello(){ fmt.Println(&#34;hello world&#34;) } //export add func add(a,b int) int { return a+b } func main(){ } golang中要导出的函数前要增加备注//expor]]></description>
</item>
<item>
    <title>go 类型转换与断言</title>
    <link>https://darcyjoven.com/go-inteface/</link>
    <pubDate>Thu, 16 Nov 2023 10:34:06 &#43;0800</pubDate>
    <author>darcy</author>
    <guid>https://darcyjoven.com/go-inteface/</guid>
    <description><![CDATA[断言—接口断言为确定类型 1 2 var greeting interface{} = &#34;hello world&#34; greetingStr := greeting.(string) 类型转换—底层结构一致的类型相互转换 1 2 greeting := []byte(&#34;hello world&#34;) greetingStr := string(greeting)]]></description>
</item>
<item>
    <title>golang的文件写入</title>
    <link>https://darcyjoven.com/golang-write/</link>
    <pubDate>Thu, 16 Nov 2023 10:34:04 &#43;0800</pubDate>
    <author>darcy</author>
    <guid>https://darcyjoven.com/golang-write/</guid>
    <description><![CDATA[1 2 3 4 // 一次性写入 if err := os.WriteFile(&#34;file.txt&#34;, []byte(&#34;Hello GOSAMPLES!&#34;), 0666); err != nil { log.Fatal(err) } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // 逐行写入 package main import ( &#34;log&#34; &#34;os&#34;]]></description>
</item>
</channel>
</rss>
